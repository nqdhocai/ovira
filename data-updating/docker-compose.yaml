version: '3.8'

services:
  # PostgreSQL Database for Prefect and the application
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: prefect
      POSTGRES_PASSWORD: prefect
      POSTGRES_DB: prefect
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U prefect"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - prefect-network

  # Redis for Prefect messaging and caching
  redis:
    image: redis:7
    volumes:
      - redis_data:/data/redis_data/
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - prefect-network

  prefect-migration:
    image: prefecthq/prefect:3-latest
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://prefect:prefect@postgres:5432/prefect
    command: >
      sh -c "
        echo 'Running database migrations...' &&
        prefect server database upgrade --yes &&
        echo 'Database migrations completed!'
      "
    networks:
      - prefect-network
    restart: "no"

  
  prefect-server:
    image: prefecthq/prefect:3-latest
    depends_on:
      prefect-migration:
        condition: service_completed_successfully
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://prefect:prefect@postgres:5432/prefect
      PREFECT_SERVER_API_HOST: ${PREFECT_SERVER_API_HOST}
      PREFECT_MESSAGING_BROKER: prefect_redis.messaging
      PREFECT_MESSAGING_CACHE: prefect_redis.messaging
      PREFECT_REDIS_MESSAGING_HOST: redis
      PREFECT_REDIS_MESSAGING_PORT: 6379
      PREFECT_REDIS_MESSAGING_DB: 0
    command: prefect server start --no-services
    ports:
      - "4200:4200"  
    networks:
      - prefect-network
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:4200/api/health\").raise_for_status()' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  prefect-services:
    image: prefecthq/prefect:3-latest
    depends_on:
      prefect-server:
        condition: service_healthy
    environment:
      PREFECT_API_DATABASE_CONNECTION_URL: postgresql+asyncpg://prefect:prefect@postgres:5432/prefect
      PREFECT_MESSAGING_BROKER: prefect_redis.messaging
      PREFECT_MESSAGING_CACHE: prefect_redis.messaging
      PREFECT_REDIS_MESSAGING_HOST: redis
      PREFECT_REDIS_MESSAGING_PORT: 6379
      PREFECT_REDIS_MESSAGING_DB: 0
    command: prefect server services start
    networks:
      - prefect-network





  # Prefect worker that runs your flows
  prefect-worker:
    image: prefecthq/prefect:3-latest
    depends_on:
      prefect-server:
        condition: service_healthy
    environment:
      PREFECT_API_URL: http://prefect-server:4200/api
    command: prefect worker start --pool ovira-pool
    networks:
      - prefect-network



  # Service to deploy flows. Runs once and exits.
  prefect-app:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      prefect-server:
        condition: service_healthy
      prefect-worker:
        condition: service_started
    environment:
      PREFECT_API_URL: http://prefect-server:4200/api
      PREFECT_LOGGING_SETTINGS_PATH:
    networks:
      - prefect-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  prefect-network:
    driver: bridge